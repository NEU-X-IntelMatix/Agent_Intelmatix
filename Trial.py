{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/NEU-X-IntelMatix/Agent_Intelmatix/blob/main/Trial.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yAiLtZkzI097",
        "outputId": "08175128-57e1-4f6e-a0cd-8c7622c1e39c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Collecting streamlit\n",
            "  Downloading streamlit-1.45.0-py3-none-any.whl.metadata (8.9 kB)\n",
            "Collecting pyngrok\n",
            "  Downloading pyngrok-7.2.7-py3-none-any.whl.metadata (9.4 kB)\n",
            "Requirement already satisfied: altair<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.0)\n",
            "Requirement already satisfied: blinker<2,>=1.5.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (1.9.0)\n",
            "Requirement already satisfied: cachetools<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.2)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (8.1.8)\n",
            "Requirement already satisfied: numpy<3,>=1.23 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.0.2)\n",
            "Requirement already satisfied: packaging<25,>=20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (24.2)\n",
            "Requirement already satisfied: pandas<3,>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.2.2)\n",
            "Requirement already satisfied: pillow<12,>=7.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (11.2.1)\n",
            "Requirement already satisfied: protobuf<7,>=3.20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.29.4)\n",
            "Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (18.1.0)\n",
            "Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.32.3)\n",
            "Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (9.1.2)\n",
            "Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.11/dist-packages (from streamlit) (0.10.2)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (4.13.2)\n",
            "Collecting watchdog<7,>=2.1.5 (from streamlit)\n",
            "  Downloading watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl.metadata (44 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.3/44.3 kB\u001b[0m \u001b[31m1.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.11/dist-packages (from streamlit) (3.1.44)\n",
            "Collecting pydeck<1,>=0.8.0b4 (from streamlit)\n",
            "  Downloading pydeck-0.9.1-py2.py3-none-any.whl.metadata (4.1 kB)\n",
            "Requirement already satisfied: tornado<7,>=6.0.3 in /usr/local/lib/python3.11/dist-packages (from streamlit) (6.4.2)\n",
            "Requirement already satisfied: PyYAML>=5.1 in /usr/local/lib/python3.11/dist-packages (from pyngrok) (6.0.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (3.1.6)\n",
            "Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (4.23.0)\n",
            "Requirement already satisfied: narwhals>=1.14.2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (1.37.1)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.12)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2025.4.26)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->altair<6,>=4.0->streamlit) (3.0.2)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (25.3.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2025.4.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.36.2)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.24.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas<3,>=1.4.0->streamlit) (1.17.0)\n",
            "Downloading streamlit-1.45.0-py3-none-any.whl (9.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.9/9.9 MB\u001b[0m \u001b[31m34.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading pyngrok-7.2.7-py3-none-any.whl (23 kB)\n",
            "Downloading pydeck-0.9.1-py2.py3-none-any.whl (6.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.9/6.9 MB\u001b[0m \u001b[31m75.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl (79 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m79.1/79.1 kB\u001b[0m \u001b[31m7.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: watchdog, pyngrok, pydeck, streamlit\n",
            "Successfully installed pydeck-0.9.1 pyngrok-7.2.7 streamlit-1.45.0 watchdog-6.0.0\n"
          ]
        }
      ],
      "source": [
        "!pip install streamlit pyngrok"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "Knigmg-AJHfu",
        "outputId": "9a9975aa-e192-4df2-95c2-baeb6a756acf"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Initializing database...\n",
            "Generating sample data...\n",
            "✅ Generated 50 customers, 100 products, 200 orders, and 576 order items.\n",
            "\n",
            "📊 Conversational Analytics Demo\n",
            "\n",
            "Sample questions:\n",
            "1. What are the top 5 customers by total order amount?\n",
            "2. What is the average order value by month?\n",
            "3. Which product categories have the highest sales?\n",
            "4. How many orders were placed each month?\n",
            "5. What is the distribution of order status?\n",
            "6. Which customers have placed the most orders?\n",
            "7. What are the most popular products?\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import random\n",
        "import datetime\n",
        "import sqlite3\n",
        "import matplotlib.pyplot as plt\n",
        "from sqlalchemy import create_engine, Column, Integer, String, Float, ForeignKey, Date, Text\n",
        "from sqlalchemy.orm import sessionmaker, declarative_base, relationship\n",
        "from IPython.display import display, HTML\n",
        "from google.colab import output\n",
        "import ipywidgets as widgets\n",
        "\n",
        "# Initialize SQLAlchemy Base\n",
        "Base = declarative_base()\n",
        "\n",
        "# Define the models (same as before)\n",
        "class Customer(Base):\n",
        "    __tablename__ = 'customers'\n",
        "\n",
        "    customer_id = Column(Integer, primary_key=True)\n",
        "    first_name = Column(String(100), nullable=False)\n",
        "    last_name = Column(String(100), nullable=False)\n",
        "    email = Column(String(255), nullable=False)\n",
        "    city = Column(String(100))\n",
        "    state = Column(String(100))\n",
        "    registration_date = Column(Date)\n",
        "\n",
        "class Product(Base):\n",
        "    __tablename__ = 'products'\n",
        "\n",
        "    product_id = Column(Integer, primary_key=True)\n",
        "    name = Column(String(255), nullable=False)\n",
        "    description = Column(Text)\n",
        "    category = Column(String(100))\n",
        "    price = Column(Float, nullable=False)\n",
        "    stock_quantity = Column(Integer, default=0)\n",
        "\n",
        "class Order(Base):\n",
        "    __tablename__ = 'orders'\n",
        "\n",
        "    order_id = Column(Integer, primary_key=True)\n",
        "    customer_id = Column(Integer, ForeignKey('customers.customer_id'))\n",
        "    order_date = Column(Date, nullable=False)\n",
        "    total_amount = Column(Float, nullable=False)\n",
        "    status = Column(String(50), default='Pending')\n",
        "\n",
        "class OrderItem(Base):\n",
        "    __tablename__ = 'order_items'\n",
        "\n",
        "    order_item_id = Column(Integer, primary_key=True)\n",
        "    order_id = Column(Integer, ForeignKey('orders.order_id'))\n",
        "    product_id = Column(Integer, ForeignKey('products.product_id'))\n",
        "    quantity = Column(Integer, nullable=False)\n",
        "    price = Column(Float, nullable=False)\n",
        "\n",
        "# Database functions\n",
        "def get_engine():\n",
        "    \"\"\"Create and return SQLAlchemy engine.\"\"\"\n",
        "    return create_engine('sqlite:///conversational_analytics.db')\n",
        "\n",
        "def get_session():\n",
        "    \"\"\"Create and return a new SQLAlchemy session.\"\"\"\n",
        "    engine = get_engine()\n",
        "    Session = sessionmaker(bind=engine)\n",
        "    return Session()\n",
        "\n",
        "def init_db():\n",
        "    \"\"\"Initialize the database.\"\"\"\n",
        "    engine = get_engine()\n",
        "    Base.metadata.create_all(engine)\n",
        "    return engine\n",
        "\n",
        "# Generate sample data and other functions (same as before)\n",
        "def generate_sample_data(session, num_customers=50, num_products=100, num_orders=200):\n",
        "    \"\"\"Generate and insert sample data for the e-commerce database.\"\"\"\n",
        "    # Clear existing data\n",
        "    session.query(OrderItem).delete()\n",
        "    session.query(Order).delete()\n",
        "    session.query(Product).delete()\n",
        "    session.query(Customer).delete()\n",
        "\n",
        "    # Generate customers\n",
        "    customers = []\n",
        "    for i in range(1, num_customers + 1):\n",
        "        customer = Customer(\n",
        "            customer_id=i,\n",
        "            first_name=f\"FirstName{i}\",\n",
        "            last_name=f\"LastName{i}\",\n",
        "            email=f\"customer{i}@example.com\",\n",
        "            city=random.choice([\"New York\", \"Los Angeles\", \"Chicago\", \"Houston\", \"Phoenix\"]),\n",
        "            state=random.choice([\"NY\", \"CA\", \"IL\", \"TX\", \"AZ\"]),\n",
        "            registration_date=datetime.datetime.now() - datetime.timedelta(days=random.randint(1, 1000))\n",
        "        )\n",
        "        customers.append(customer)\n",
        "\n",
        "    session.add_all(customers)\n",
        "\n",
        "    # Generate products\n",
        "    products = []\n",
        "    categories = [\"Electronics\", \"Clothing\", \"Books\", \"Home\", \"Sports\"]\n",
        "    for i in range(1, num_products + 1):\n",
        "        product = Product(\n",
        "            product_id=i,\n",
        "            name=f\"Product {i}\",\n",
        "            description=f\"Description for product {i}\",\n",
        "            category=random.choice(categories),\n",
        "            price=round(random.uniform(9.99, 999.99), 2),\n",
        "            stock_quantity=random.randint(0, 100)\n",
        "        )\n",
        "        products.append(product)\n",
        "\n",
        "    session.add_all(products)\n",
        "\n",
        "    # Generate orders and order items\n",
        "    orders = []\n",
        "    order_items = []\n",
        "\n",
        "    for i in range(1, num_orders + 1):\n",
        "        customer_id = random.randint(1, num_customers)\n",
        "        order_date = datetime.datetime.now() - datetime.timedelta(days=random.randint(1, 365))\n",
        "        status = random.choice([\"Pending\", \"Shipped\", \"Delivered\", \"Cancelled\"])\n",
        "\n",
        "        # Generate 1-5 items per order\n",
        "        num_items = random.randint(1, 5)\n",
        "        order_product_ids = random.sample(range(1, num_products + 1), num_items)\n",
        "\n",
        "        total_amount = 0\n",
        "\n",
        "        order = Order(\n",
        "            order_id=i,\n",
        "            customer_id=customer_id,\n",
        "            order_date=order_date,\n",
        "            total_amount=0,  # Will update after calculating items\n",
        "            status=status\n",
        "        )\n",
        "        orders.append(order)\n",
        "\n",
        "        for product_id in order_product_ids:\n",
        "            quantity = random.randint(1, 3)\n",
        "            price = products[product_id - 1].price\n",
        "            item_total = quantity * price\n",
        "            total_amount += item_total\n",
        "\n",
        "            order_item = OrderItem(\n",
        "                order_item_id=len(order_items) + 1,\n",
        "                order_id=i,\n",
        "                product_id=product_id,\n",
        "                quantity=quantity,\n",
        "                price=price\n",
        "            )\n",
        "            order_items.append(order_item)\n",
        "\n",
        "        order.total_amount = round(total_amount, 2)\n",
        "\n",
        "    session.add_all(orders)\n",
        "    session.flush()  # Flush to generate primary keys\n",
        "    session.add_all(order_items)\n",
        "\n",
        "    session.commit()\n",
        "\n",
        "    return f\"Generated {len(customers)} customers, {len(products)} products, {len(orders)} orders, and {len(order_items)} order items.\"\n",
        "\n",
        "def execute_sql_query(query):\n",
        "    \"\"\"Execute raw SQL query and return results as DataFrame.\"\"\"\n",
        "    engine = get_engine()\n",
        "    try:\n",
        "        return pd.read_sql_query(query, engine)\n",
        "    except Exception as e:\n",
        "        print(f\"Error executing query: {str(e)}\")\n",
        "        return None\n",
        "\n",
        "# Text-to-SQL Converter\n",
        "class TextToSQLConverter:\n",
        "    def convert(self, natural_language_query, schema=None):\n",
        "        \"\"\"Convert natural language query to SQL using predefined mappings.\"\"\"\n",
        "        demo_queries = {\n",
        "            \"What are the top 5 customers by total order amount?\": \"\"\"\n",
        "            SELECT c.customer_id, c.first_name, c.last_name, SUM(o.total_amount) as total_spent\n",
        "            FROM customers c\n",
        "            JOIN orders o ON c.customer_id = o.customer_id\n",
        "            GROUP BY c.customer_id, c.first_name, c.last_name\n",
        "            ORDER BY total_spent DESC\n",
        "            LIMIT 5\n",
        "            \"\"\",\n",
        "\n",
        "            \"What is the average order value by month?\": \"\"\"\n",
        "            SELECT strftime('%Y-%m', o.order_date) as month,\n",
        "                   AVG(o.total_amount) as average_order_value\n",
        "            FROM orders o\n",
        "            GROUP BY month\n",
        "            ORDER BY month\n",
        "            \"\"\",\n",
        "\n",
        "            \"Which product categories have the highest sales?\": \"\"\"\n",
        "            SELECT p.category, SUM(oi.quantity * oi.price) as total_sales\n",
        "            FROM products p\n",
        "            JOIN order_items oi ON p.product_id = oi.product_id\n",
        "            GROUP BY p.category\n",
        "            ORDER BY total_sales DESC\n",
        "            \"\"\",\n",
        "\n",
        "            \"How many orders were placed each month?\": \"\"\"\n",
        "            SELECT strftime('%Y-%m', o.order_date) as month,\n",
        "                   COUNT(*) as order_count\n",
        "            FROM orders o\n",
        "            GROUP BY month\n",
        "            ORDER BY month\n",
        "            \"\"\",\n",
        "\n",
        "            \"What is the distribution of order status?\": \"\"\"\n",
        "            SELECT status, COUNT(*) as count\n",
        "            FROM orders\n",
        "            GROUP BY status\n",
        "            ORDER BY count DESC\n",
        "            \"\"\",\n",
        "\n",
        "            \"Which customers have placed the most orders?\": \"\"\"\n",
        "            SELECT c.customer_id, c.first_name, c.last_name, COUNT(o.order_id) as order_count\n",
        "            FROM customers c\n",
        "            JOIN orders o ON c.customer_id = o.customer_id\n",
        "            GROUP BY c.customer_id, c.first_name, c.last_name\n",
        "            ORDER BY order_count DESC\n",
        "            LIMIT 10\n",
        "            \"\"\",\n",
        "\n",
        "            \"What are the most popular products?\": \"\"\"\n",
        "            SELECT p.product_id, p.name, p.category, SUM(oi.quantity) as total_quantity_sold\n",
        "            FROM products p\n",
        "            JOIN order_items oi ON p.product_id = oi.product_id\n",
        "            GROUP BY p.product_id, p.name, p.category\n",
        "            ORDER BY total_quantity_sold DESC\n",
        "            LIMIT 10\n",
        "            \"\"\"\n",
        "        }\n",
        "\n",
        "        # Try to find an exact match\n",
        "        if natural_language_query in demo_queries:\n",
        "            return demo_queries[natural_language_query].strip(), None\n",
        "\n",
        "        # Try to find a partial match\n",
        "        for query, sql in demo_queries.items():\n",
        "            if query.lower() in natural_language_query.lower():\n",
        "                return sql.strip(), None\n",
        "\n",
        "        # Default query if no match\n",
        "        return demo_queries[\"What are the top 5 customers by total order amount?\"].strip(), \"No matching query found, using default query\"\n",
        "\n",
        "# Initialize database\n",
        "print(\"Initializing database...\")\n",
        "init_db()\n",
        "\n",
        "# Initialize database with sample data\n",
        "print(\"Generating sample data...\")\n",
        "session = get_session()\n",
        "try:\n",
        "    message = generate_sample_data(session)\n",
        "    print(f\"✅ {message}\")\n",
        "finally:\n",
        "    session.close()\n",
        "\n",
        "# Initialize converter\n",
        "converter = TextToSQLConverter()\n",
        "\n",
        "# Display sample questions\n",
        "print(\"\\n📊 Conversational Analytics Demo\")\n",
        "print(\"\\nSample questions:\")\n",
        "sample_questions = [\n",
        "    \"What are the top 5 customers by total order amount?\",\n",
        "    \"What is the average order value by month?\",\n",
        "    \"Which product categories have the highest sales?\",\n",
        "    \"How many orders were placed each month?\",\n",
        "    \"What is the distribution of order status?\",\n",
        "    \"Which customers have placed the most orders?\",\n",
        "    \"What are the most popular products?\"\n",
        "]\n",
        "\n",
        "for i, q in enumerate(sample_questions, 1):\n",
        "    print(f\"{i}. {q}\")\n",
        "\n",
        "# Create input for natural language query\n",
        "query_text = input(\"\\nEnter your question (or type a number 1-7 for a sample question): \")\n",
        "\n",
        "# Check if user entered a number for a sample question\n",
        "try:\n",
        "    num = int(query_text)\n",
        "    if 1 <= num <= len(sample_questions):\n",
        "        query_text = sample_questions[num-1]\n",
        "        print(f\"Selected: {query_text}\")\n",
        "except ValueError:\n",
        "    pass  # User entered a custom question\n",
        "\n",
        "print(\"\\nConverting to SQL...\")\n",
        "sql_query, error = converter.convert(query_text)\n",
        "\n",
        "if error and \"default query\" not in error:\n",
        "    print(f\"Error: {error}\")\n",
        "else:\n",
        "    if \"default query\" in str(error):\n",
        "        print(\"Note: Using demo mode. The generated query may not exactly match your question.\")\n",
        "\n",
        "    print(\"\\nGenerated SQL Query:\")\n",
        "    print(sql_query)\n",
        "\n",
        "    print(\"\\nExecuting query...\")\n",
        "    results_df = execute_sql_query(sql_query)\n",
        "\n",
        "    if results_df is not None and not results_df.empty:\n",
        "        print(\"\\nQuery Results:\")\n",
        "        display(results_df)\n",
        "\n",
        "        print(\"\\nVisualizing results...\")\n",
        "        plt.figure(figsize=(10, 6))\n",
        "\n",
        "        # Simple visualization based on data type\n",
        "        if len(results_df) <= 10:  # Small result set\n",
        "            if 'month' in results_df.columns or 'date' in results_df.columns.str.lower().tolist():\n",
        "                # Time series\n",
        "                x_col = next(col for col in results_df.columns if 'month' in col.lower() or 'date' in col.lower())\n",
        "                y_col = results_df.select_dtypes(include=['number']).columns[0]\n",
        "                plt.plot(results_df[x_col], results_df[y_col], marker='o')\n",
        "                plt.title(f\"{y_col} over {x_col}\")\n",
        "                plt.xticks(rotation=45)\n",
        "            else:\n",
        "                # Bar chart\n",
        "                if len(results_df.columns) >= 2:\n",
        "                    x_col = results_df.columns[0]\n",
        "                    y_col = results_df.select_dtypes(include=['number']).columns[0] if len(results_df.select_dtypes(include=['number']).columns) > 0 else results_df.columns[1]\n",
        "                    plt.bar(results_df[x_col], results_df[y_col])\n",
        "                    plt.title(f\"{y_col} by {x_col}\")\n",
        "                    plt.xticks(rotation=45)\n",
        "        else:  # Large result set, show top 10\n",
        "            if len(results_df.columns) >= 2:\n",
        "                x_col = results_df.columns[0]\n",
        "                y_col = results_df.select_dtypes(include=['number']).columns[0] if len(results_df.select_dtypes(include=['number']).columns) > 0 else results_df.columns[1]\n",
        "                plt.bar(results_df[x_col].head(10), results_df[y_col].head(10))\n",
        "                plt.title(f\"Top 10 {y_col} by {x_col}\")\n",
        "                plt.xticks(rotation=45)\n",
        "\n",
        "        plt.tight_layout()\n",
        "        plt.show()\n",
        "\n",
        "        # Option to download as CSV\n",
        "        from google.colab import files\n",
        "        results_df.to_csv('query_results.csv', index=False)\n",
        "        files.download('query_results.csv')\n",
        "    elif results_df is not None:\n",
        "        print(\"Query executed successfully, but returned no results.\")\n",
        "    else:\n",
        "        print(\"Error executing query.\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ttom-OMCN4Bb"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPvszJXAWb1zoCH1w0bcZvJ",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}